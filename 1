#include <msp430.h>

// Global variables
char idNumber[17];
int characterCount = 0;

// Function prototype to check if the ID is valid using the Luhn Algorithm
int checkValidID(char *number);

void main(void)
{
    // Disable the Watchdog Timer
    WDTCTL = WDTPW | WDTHOLD;

    // Set LED pins as outputs
    P1DIR |= BIT0;  // Green LED
    P2DIR |= BIT1;  // Red LED

    // UART setup
    P1SEL0 |= BIT4 | BIT5;              // Assign UART pins
    UCA0CTLW0 |= UCSWRST;               // Reset UART for configuration
    UCA0CTLW0 |= UCSSEL_2;              // Use SMCLK
    UCA0BR0 = 8;                        // Set baud rate to 115200
    UCA0BR1 = 0;
    UCA0MCTLW |= UCOS16 | UCBRF_10 | UCBRS_0;
    UCA0CTLW0 &= ~UCSWRST;              // Release UART reset
    UCA0IE |= UCRXIE;                   // Enable UART receive interrupt

    // Enable global interrupts
    __bis_SR_register(GIE);

    // Infinite loop
    while (1)
    {
        // Check once 16 characters are received
        if (characterCount == 16)
        {
            idNumber[characterCount] = '\0'; // End the string
            characterCount = 0;              // Reset the counter

            // Check the ID
            if (checkValidID(idNumber))
            {
                P1OUT |= BIT0;               // Turn on the green LED
                __delay_cycles(500000);      // Delay for 0.5 seconds
                P1OUT &= ~BIT0;              // Turn off the green LED
            }
            else
            {
                P2OUT |= BIT1;               // Turn on the red LED
                __delay_cycles(1000000);     // Delay for 1 second
                P2OUT &= ~BIT1;              // Turn off the red LED
            }
        }
    }
}

#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG))
    {
        case USCI_NONE: break;
        case USCI_UART_UCRXIFG:
            idNumber[characterCount] = UCA0RXBUF;   // Store received character
            characterCount++;
            P2OUT ^= BIT1;                         // Toggle red LED
            UCA0TXBUF = '*';                       // Send '*' back to PC
            break;
        case USCI_UART_UCTXIFG: break;
        case USCI_UART_UCSTTIFG: break;
        case USCI_UART_UCTXCPTIFG: break;
    }
}

// Luhn algorithm to verify if the ID is valid
int checkValidID(char *number)
{
    // This function implements the Luhn algorithm and returns 1 if valid, else 0
    int sum = 0;
    int isAlternate = 0;
    for (int i = 15; i >= 0; i--)
    {
        int n = number[i] - '0';
        if (isAlternate)
        {
            n = n * 2;
            if (n > 9) n = n - 9;
        }
        sum += n;
        isAlternate = !isAlternate;
    }
    return sum % 10 == 0;
}
