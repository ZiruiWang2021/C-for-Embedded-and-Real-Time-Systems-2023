#include <msp430.h>

// Global variables
char idNumber[17];       // Array to store the 16-digit ID plus a null terminator.
int characterCount = 0;  // Counter to keep track of how many characters have been received.

// Function prototype declaration for the Luhn Algorithm check.
int checkValidID(char *number);

void main(void)
{
    // Disable the Watchdog Timer to prevent automatic resets.
    WDTCTL = WDTPW | WDTHOLD;

    // Configure LED pins as outputs:
    P1DIR |= BIT0;  // Green LED at P1.0 is set as an output.
    P2DIR |= BIT1;  // Red LED at P2.1 is set as an output.

    // UART (Universal Asynchronous Receiver-Transmitter) setup:
    P1SEL0 |= BIT4 | BIT5;              // Select UART functionality for P1.4 (TX) and P1.5 (RX).
    UCA0CTLW0 |= UCSWRST;               // Put UART into reset mode to allow configuration.
    UCA0CTLW0 |= UCSSEL_2;              // Set clock source to SMCLK.
    UCA0BR0 = 8;                        // Setting baud rate to 115200 with 1MHz clock.
    UCA0BR1 = 0;
    UCA0MCTLW |= UCOS16 | UCBRF_10 | UCBRS_0; // Modulation for 115200 baud rate.
    UCA0CTLW0 &= ~UCSWRST;              // Release UART from reset mode.
    UCA0IE |= UCRXIE;                   // Enable the UART receive interrupt.

    // Enable global interrupts for the MCU to respond to the interrupt events.
    __bis_SR_register(GIE);

    // Infinite loop waiting for complete ID input.
    while (1)
    {
        // Once all 16 characters of the ID are received:
        if (characterCount == 16)
        {
            idNumber[characterCount] = '\0'; // Add a null terminator to convert char array to a valid C string.
            characterCount = 0;              // Reset the character counter for next ID input.

            // Check the validity of the ID using the Luhn Algorithm.
            if (checkValidID(idNumber))
            {
                P1OUT |= BIT0;               // Turn on the green LED indicating a valid ID.
                __delay_cycles(500000);      // Wait for 0.5 seconds.
                P1OUT &= ~BIT0;              // Turn off the green LED.
            }
            else
            {
                P2OUT |= BIT1;               // Turn on the red LED indicating an invalid ID.
                __delay_cycles(1000000);     // Wait for 1 second.
                P2OUT &= ~BIT1;              // Turn off the red LED.
            }
        }
    }
}

#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
    // ISR for UART events:
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG))
    {
        case USCI_NONE: break;
        case USCI_UART_UCRXIFG:
            // When a character is received over UART:
            idNumber[characterCount] = UCA0RXBUF;   // Store the received character in the array.
            characterCount++;                      // Increment the character counter.
            P2OUT ^= BIT1;                         // Toggle the red LED as visual feedback.
            UCA0TXBUF = '*';                       // Acknowledge by sending a '*' character back to the PC.
            break;
        case USCI_UART_UCTXIFG: break;
        case USCI_UART_UCSTTIFG: break;
        case USCI_UART_UCTXCPTIFG: break;
    }
}

// Function to implement the Luhn Algorithm:
int checkValidID(char *number)
{
    int sum = 0;
    int isAlternate = 0;
    for (int i = 15; i >= 0; i--)
    {
        int n = number[i] - '0';         // Convert character to integer value.
        if (isAlternate)
        {
            n = n * 2;                   // Double every second digit.
            if (n > 9) n = n - 9;        // If the result is two digits, subtract 9.
        }
        sum += n;                        // Add to the cumulative sum.
        isAlternate = !isAlternate;      // Toggle the alternate flag.
    }
    return sum % 10 == 0;                // If the final sum is divisible by 10, it's a valid ID.
}
